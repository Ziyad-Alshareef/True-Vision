# Generated by Django 4.2.18 on 2025-04-19 21:37

import api.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("api", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "reset_password_pin",
                    models.CharField(blank=True, max_length=6, null=True),
                ),
                (
                    "reset_password_pin_expiration",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Detection",
            fields=[
                ("Result_id", models.AutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="DetectionModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "Confidence",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Confidence score (0-100)",
                        max_digits=5,
                    ),
                ),
                (
                    "Result",
                    models.CharField(
                        choices=[("real", "Real"), ("fake", "Fake")], max_length=255
                    ),
                ),
                ("Detected_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Model",
            fields=[
                ("Model_id", models.AutoField(primary_key=True, serialize=False)),
                ("Name", models.CharField(max_length=255)),
                ("Version", models.CharField(max_length=255)),
                ("Description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                ("Video_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "Video_File",
                    models.FileField(
                        null=True,
                        storage=api.models.S3MediaStorage(),
                        upload_to="videos/",
                    ),
                ),
                ("Video_Path", models.TextField(help_text="S3 path to the video file")),
                (
                    "Thumbnail",
                    models.ImageField(
                        blank=True,
                        help_text="Representative frame of the video",
                        null=True,
                        storage=api.models.S3MediaStorage(),
                        upload_to="thumbnails/",
                    ),
                ),
                ("isAnalyzed", models.BooleanField(default=False)),
                ("size", models.BigIntegerField()),
                ("Length", models.IntegerField()),
                ("Resolution", models.CharField(max_length=255)),
                ("Uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("Frame_per_Second", models.BigIntegerField()),
                (
                    "User_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="CustomUser",
        ),
        migrations.AddField(
            model_name="detectionmodel",
            name="Model_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.model"
            ),
        ),
        migrations.AddField(
            model_name="detectionmodel",
            name="Result_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.detection"
            ),
        ),
        migrations.AddField(
            model_name="detection",
            name="Video_id",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.video"
            ),
        ),
    ]
